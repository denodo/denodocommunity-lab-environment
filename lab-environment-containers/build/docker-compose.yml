# Copyright 2023 Denodo
# SPDX-License-Identifier: Apache-2.0

version: '3.8'
networks:
    denodo-lab-net:
        name: denodo-lab-net
        driver: bridge
        ipam:
            config:
              - subnet: ${NET_SUBNET}

services:

  # ########################
  # Denodo 
  # ########################
  # Database for storing Denodo metadata and Cache
  denodo-postgres:
    container_name: denodocommunity-lab-environment-metadata
    image: ${METADATA_DB_VERSION}
    profiles: ["all","denodo","denodo-ext-metadata","denodo-vdp","denodo-sched","denodo-datacatalog","tutorial","training","ext-sso","ext"]
    hostname: ${METADATA_DB_HOSTNAME}
    restart: unless-stopped
    networks:
        denodo-lab-net:
            ipv4_address: ${METADATA_DB_IP}  
    volumes:   
      - ${METADATA_DB_INIT_SCRIPT}:/docker-entrypoint-initdb.d/init.sql
      - ${METADATA_DB_DATA_DIRECTORY}:/mnt
      - metadatadb-lab-env:/var/lib/postgresql/data  
    environment:
      - POSTGRES_PASSWORD=${METADATA_DB_PWD}
      - POSTGRES_DB=postgres
    ports:
      - "${METADATA_DB_PORT}:${METADATA_DB_PORT}"
    expose:
      - "${METADATA_DB_PORT}"
    command: -p ${METADATA_DB_PORT}

  # Denodo Virtual DataPort server / Embedded web container (Restful-ws/OData service/GraphQL service)
  denodo-vdp:
    container_name: denodocommunity-lab-environment-vdp
    image: ${DENODO_VERSION}
    profiles: ["all","denodo","denodo-vdp","denodo-datacatalog","tutorial","training"]
    hostname: ${DENODO_VDP_HOSTNAME}
    depends_on:
      - denodo-postgres    
    networks:
        denodo-lab-net:
            ipv4_address: ${DENODO_VDP_IP}
    volumes:
      - "${DENODO_SA_LIC}:/opt/denodo/conf/denodo.lic"   
      - "${DENODO_VDP_INIT_VQL_DIR}:/container-entrypoint-init/"  
      - ${DENODO_VDP_GRAPHQL_FILES_DIRECTORY}/application.properties:/opt/denodo/resources/apache-tomcat/webapps/denodo-graphql-service/WEB-INF/classes/application.properties 
      - ${DENODO_VDP_GRAPHQL_FILES_DIRECTORY}/web.xml:/opt/denodo/resources/apache-tomcat/conf/web.xml
      - ${DENODO_VDP_FILES_DIRECTORY}:/opt/denodo/  
    ports:
      - "${DENODO_VDP_EXTERNAL_WEB_PORT}:9090"
      - "${DENODO_VDP_EXTERNAL_ODBC_PORT}:9996"
      - "${DENODO_VDP_EXTERNAL_JMX_PORT}:9997"
      - "${DENODO_VDP_EXTERNAL_PORT}:9999" 
    environment:
      - DENODO_USERNAME=${DENODO_VDP_ADMIN_USER}
      - DENODO_PASSWORD=${DENODO_VDP_ADMIN_PWD}
      - DENODO_WEBCONTAINER_STARTUP=true
      - DENODO_DATABASE_PROVIDER=postgresql
      - DENODO_DATABASE_PROVIDER_VERSION=12
      - DENODO_DATABASE_URI=jdbc:postgresql://${METADATA_DB_IP}:${METADATA_DB_PORT}/denodo
      - DENODO_DATABASE_DRIVER=org.postgresql.Driver
      - DENODO_DATABASE_CLASSPATH=postgresql-12
      - DENODO_DATABASE_USER=denodo
      - DENODO_DATABASE_PASSWORD=denodo
      - DENODO_DATABASE_INITIAL_SIZE=4
      - DENODO_DATABASE_MAX_ACTIVE=20
      - DENODO_DATABASE_TEST=true
      - DENODO_DATABASE_QUERY=Select 1
    command: --vdpserver

  # Denodo Scheduler server
  denodo-sched:
    container_name: denodocommunity-lab-environment-sched
    image: ${DENODO_VERSION}
    profiles: ["all","denodo","denodo-sched"]
    hostname: ${DENODO_SCHED_HOSTNAME}
    depends_on:
      denodo-postgres:
        condition: "service_started"
        required: true 
      denodo-vdp:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
        denodo-lab-net:
            ipv4_address: ${DENODO_SCHED_IP}
    volumes:
      - "${DENODO_SA_LIC}:/opt/denodo/conf/denodo.lic"
      - "${DENODO_SCHED_INIT_ZIP_DIR}:/container-entrypoint-init/"  
    ports:
      - "${DENODO_SCHED_EXTERNAL_PORT}:8000"
    environment:
      - DENODO_SCHSERVER_SERVER_HOST=${DENODO_VDP_HOSTNAME}
      - DENODO_SCHSERVER_SERVER_PORT=9999
      - DENODO_SCHSERVER_DATABASE_PROVIDER=postgresql
      - DENODO_SCHSERVER_DATABASE_PROVIDER_VERSION=12
      - DENODO_SCHSERVER_DATABASE_URI=jdbc:postgresql://${METADATA_DB_IP}:${METADATA_DB_PORT}/denodo
      - DENODO_SCHSERVER_DATABASE_DRIVER=org.postgresql.Driver
      - DENODO_SCHSERVER_DATABASE_CLASSPATH=postgresql-12
      - DENODO_SCHSERVER_DATABASE_USER=denodo
      - DENODO_SCHSERVER_DATABASE_PASSWORD=denodo
      - DENODO_SCHSERVER_DATABASE_INITIAL_SIZE=4
      - DENODO_SCHSERVER_DATABASE_MAX_ACTIVE=20
      - DENODO_SCHSERVER_DATABASE_TEST=true
      - DENODO_SCHSERVER_DATABASE_QUERY=Select 1
    command: --schserver

  # Denodo Index server
  denodo-index:
    container_name: denodocommunity-lab-environment-index
    image: ${DENODO_VERSION}
    profiles: ["all","denodo","denodo-index"]
    hostname: ${DENODO_SCHED_INDEX_HOSTNAME}
    depends_on:
      denodo-sched:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
        denodo-lab-net:
            ipv4_address: ${DENODO_SCHED_INDEX_IP}
    volumes:
      - "${DENODO_SA_LIC}:/opt/denodo/conf/denodo.lic"
    ports:
      - "${DENODO_SCHED_INDEX_EXTERNAL_PORT}:9000"
    command: --schindex

  # Denodo Design Studio web tool
  denodo-design-studio:
    container_name: denodocommunity-lab-environment-ds    
    image: ${DENODO_VERSION}
    profiles: ["all","denodo","denodo-designstudio","denodo-vdp","denodo-datacatalog","tutorial","training"]
    hostname: ${DENODO_DS_HOSTNAME}
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
        denodo-lab-net:
            ipv4_address: ${DENODO_DS_IP}
    ports:
      - "${DENODO_DS_EXTERNAL_PORT}:9090"
    command: --designstudio  

  # Denodo Data Catalog web tool
  denodo-data-catalog:
    container_name: denodocommunity-lab-environment-dc
    image: ${DENODO_VERSION}
    profiles: ["all","denodo","denodo-datacatalog","training"]
    hostname: ${DENODO_DC_HOSTNAME}
    depends_on:
      - denodo-vdp
    restart: unless-stopped
    networks:
        denodo-lab-net:
            ipv4_address: ${DENODO_DC_IP}
    volumes:
      - "${DENODO_SA_LIC}:/opt/denodo/conf/denodo.lic"
    ports:
      - "${DENODO_DC_EXTERNAL_PORT}:9090"
    environment:
      - DENODO_DC_SERVER_HOST=${DENODO_VDP_HOSTNAME}
      - DENODO_DC_DATABASE_PROVIDER=postgresql
      - DENODO_DC_DATABASE_URI=jdbc:postgresql://${METADATA_DB_IP}:${METADATA_DB_PORT}/denodo
      - DENODO_DC_DATABASE_DRIVER=org.postgresql.Driver
      - DENODO_DC_DATABASE_USER=denodo
      - DENODO_DC_DATABASE_PASSWORD=denodo
      - DENODO_DC_DATABASE_MAX_POOL=5
      - DENODO_DC_DATABASE_QUERY=Select 1
    command: --datacatalog

  # Denodo Sechuder Administration web tool
  denodo-sched-admin:
    container_name: denodocommunity-lab-environment-sched-admin
    image: ${DENODO_VERSION}
    profiles: ["all","denodo","denodo-sched","denodo-sched-admin"]
    hostname: ${DENODO_SCHED_ADMIN_HOSTNAME}
    depends_on:
      denodo-sched:
        condition: "service_started"
        required: false
      denodo-index:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
        denodo-lab-net:
            ipv4_address: ${DENODO_SCHED_ADMIN_IP}
    ports:
      - "${DENODO_SCHED_ADMIN_EXTERNAL_PORT}:9090"
    command: --schadmin

  # ########################
  # Data Sources
  # ########################
  # Relational Database
  ds-mariadb:
    container_name: denodocommunity-lab-environment-mariadb
    image: ${RELATIONAL_DB_VERSION}
    profiles: ["all","ds","ds-mariadb","tutorial","training"]
    hostname: ${RELATIONAL_DB_HOSTNAME}
    restart: unless-stopped
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    networks:
        denodo-lab-net:
            ipv4_address: ${RELATIONAL_DB_IP} 
    volumes:      
      - ${RELATIONAL_DB_INIT_SCRIPT}:/docker-entrypoint-initdb.d/mariadb-init.sql
      - ${RELATIONAL_DB_DATA_DIRECTORY}:/mnt
      - mariadb-lab-env:/var/lib/maria/data
    environment:
      MARIADB_ROOT_PASSWORD: ${RELATIONAL_DB_PWD}
    ports:
      - "${RELATIONAL_DB_EXTERNAL_PORT}:3306"

  # Analytical Database
  ds-postgresql:
    container_name: denodocommunity-lab-environment-postgres
    image: ${ANALYTICAL_DB_VERSION}
    profiles: ["all","ds","ds-postgres","training"]
    hostname: ${ANALYTICAL_DB_HOSTNAME}
    restart: unless-stopped
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    networks:
        denodo-lab-net:
            ipv4_address: ${ANALYTICAL_DB_IP}      
    volumes:   
      - ${ANALYTICAL_DB_INIT_SCRIPT}:/docker-entrypoint-initdb.d/init.sql
      - ${ANALYTICAL_DB_DATA_DIRECTORY}:/mnt
      - postgres-lab-env:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${ANALYTICAL_DB_PWD}
      - POSTGRES_DB=postgres
    ports:
      - "${ANALYTICAL_DB_PORT}:5432"
 
  # Application server
  ds-tomcat:
    container_name: denodocommunity-lab-environment-tomcat 
    image: ${APPSERVER_VERSION}
    profiles: ["all","ds","ds-tomcat","tutorial","training"]
    hostname: ${APPSERVER_HOSTNAME}
    restart: unless-stopped
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    networks: 
      denodo-lab-net: 
        ipv4_address: ${APPSERVER_IP}
    ports:
      - "${APPSERVER_EXTERNAL_PORT}:8080"
    volumes:
      - "${APPSERVER_WAR_DIRECTORY}:/usr/local/tomcat/webapps/"

  # HTTP server
  ds-httpd:
    container_name: denodocommunity-lab-environment-httpd
    image: ${HTTPSERVER_VERSION}
    profiles: ["all","ds","ds-httpd","tutorial","training"]
    hostname: ${HTTPSERVER_HOSTNAME}
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks: 
      denodo-lab-net: 
        ipv4_address: ${HTTPSERVER_IP}
    ports:
      - "${HTTPSERVER_EXTERNAL_PORT}:80"
    volumes:
      - ${HTTPSERVER_WWW_DIRECTORY}:/usr/local/apache2/htdocs

  # NoSQL Database
  ds-mongo:
    container_name: denodocommunity-lab-environment-mongo
    image: ${NOSQL_DB_VERSION}
    profiles: ["all","ds","ds-mongo","training"]
    hostname: ${NOSQL_DB_HOSTNAME}
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
      denodo-lab-net:
        ipv4_address: ${NOSQL_DB_IP} 
    volumes:
      - ${NOSQL_DB_INIT_DIRECTORY}:/docker-entrypoint-initdb.d/:ro
      - mongodb-lab-env:/data/db      
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${NOSQL_DB_ROOT_ADMIN}
      - MONGO_INITDB_ROOT_PASSWORD=${NOSQL_DB_ROOT_PWD}
    ports:
      - '${NOSQL_DB_EXTERNAL_PORT}:27017'
  
  # Kafka (Zookeeper+Broker)
  ds-kafka-zookeeper:
    container_name: denodocommunity-lab-environment-zookeeper
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION}
    profiles: ["ds-kafka"]
    hostname: zookeeper
    networks:
      denodo-lab-net:
        ipv4_address: ${KAFKA_ZOOKEEPER_IP}
    ports:
      - "2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  ds-kafka:
    container_name: denodocommunity-lab-environment-kafka
    image: confluentinc/cp-server:${KAFKA_VERSION}
    profiles: ["ds-kafka"]
    hostname: kafka
    networks:
      denodo-lab-net:
        ipv4_address: ${KAFKA_BROKER_IP}
    depends_on:
      - ds-kafka-zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
      - "${KAFKA_JMX_PORT}:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: kafka
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:9092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  # MinIO (S3)
  ds-dfs:
    container_name: denodocommunity-lab-environment-minio
    image: ${DFS_VERSION}
    profiles: ["ds-dfs"]
    hostname: minio
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    restart: always
    networks:
      denodo-lab-net:
        ipv4_address: ${DFS_IP} 
    volumes:
      - dfs-lab-env:/data      
    environment:
      - MINIO_ROOT_USER=${DFS_ROOT_ADMIN}
      - MINIO_ROOT_PASSWORD=${DFS_ROOT_PWD}
    ports:
      - '${DFS_PORT}:9000'
      - '${DFS_CONSOLE_PORT}:9001'
    command: --console-address ":9001"

  # SQL engine
  ds-presto-coordinator:
    container_name: denodocommunity-lab-environment-presto-coordinator
    image: ${PRESTO_VERSION}
    profiles: ["ds-presto"]
    hostname: presto-coordinator
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    networks:
      denodo-lab-net:
        ipv4_address: ${PRESTO_COORDINATOR_IP} 
    ports:
      - "${PRESTO_COORDINATOR_PORT}:8080"
    volumes:
      - ../../lab-environment-sources/res/presto/coordinator/config.properties:/opt/presto-server/etc/config.properties
      - ../../lab-environment-sources/res/presto/coordinator/local_postgres.properties:/opt/presto-server/etc/catalog/local_postgres.properties
    
  ds-presto-worker:
    container_name: denodocommunity-lab-environment-presto-worker
    image: ${PRESTO_VERSION}
    profiles: ["ds-presto"]
    hostname: presto-worker
    ports:
      - "8083:8083"
    volumes:
      - ../../lab-environment-sources/res/presto/worker/config.properties:/opt/presto-server/etc/config.properties
    depends_on:
      - ds-presto-coordinator
    networks:
      denodo-lab-net:
        ipv4_address: ${PRESTO_WORKER_IP} 

  # ###################
  # External Services #
  # ###################
  # LDAP
  ext-apacheds:
    container_name: denodocommunity-lab-environment-apacheds
    image: ${LDAP_VERSION}
    profiles: ["all","ext","ext-sso","ext-ldap","ds","tutorial","training"]
    hostname: ${LDAP_HOSTNAME}
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
      denodo-lab-net:
        ipv4_address: ${LDAP_IP} 
    ports:
      - "${LDAP_EXTERNAL_PORT}:10389"
    volumes:
      - ${LDAP_LDIF_DIRECTORY}:/opt/ldif_ext/
    environment:
      - DOMAIN_NAME=${LDAP_DOMAIN_NAME}
      - DOMAIN_SUFFIX=${LDAP_DOMAIN_SUFFIX}
      - ADMIN_PASSWORD=${LDAP_ADMIN_PASSWORD}  

  # Single Sign On
  ext-keycloak:
    container_name: denodocommunity-lab-environment-keycloak
    image: ${SSO_VERSION}
    profiles: ["all","ext","ext-sso"]
    hostname: ${SSO_HOSTNAME}
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
      denodo-postgres:
        condition: "service_started"
        required: true
    restart: unless-stopped
    networks:
      denodo-lab-net:
        ipv4_address: ${SSO_IP} 
    ports:
      - "${SSO_EXTERNAL_PORT}:8443"
    volumes:
      - ${SSO_CONF_FILE}:/data/denodo-realm.json
    environment:
      KEYCLOAK_USER: ${SSO_USER}
      KEYCLOAK_PASSWORD: ${SSO_PASSWORD}
      DB_VENDOR: postgres
      DB_ADDR: ${METADATA_DB_IP}:${METADATA_DB_PORT}
      DB_DATABASE: sso
      DB_USER: ${SSO_USER}
      DB_PASSWORD: ${SSO_PASSWORD}
      JAVA_OPTS_APPEND: "-Dkeycloak.profile.feature.upload_scripts=enabled"
      KEYCLOAK_IMPORT: /data/denodo-realm.json

  # GIT server
  ext-git:
    container_name: denodocommunity-lab-environment-git
    image: ${VCS_VERSION}
    profiles: ["all","ext","ext-git"]
    hostname: ${VCS_HOSTNAME}
    networks:
      denodo-lab-net:
        ipv4_address: ${VCS_IP}
    restart: always
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        gitlab_rails['initial_root_password'] = '${VCS_ROOT_PASSWORD}'
        gitlab_rails['gitlab_shell_ssh_port'] = ${VCS_EXTERNAL_SSH_PORT}
        gitlab_rails['lfs_enabled'] = true
    ports:
      - '${VCS_EXTERNAL_HTTP_PORT}:80'
      - '${VCS_EXTERNAL_HTTPS_PORT}:443'
      - '${VCS_EXTERNAL_SSH_PORT}:22'
    volumes:
      - git-lab-env:/var/opt/gitlab
    shm_size: '256m'

  # ####################
  # Other applications #
  # ####################
  # NoSQL GUI 
  util-mongo-express:
    container_name: denodocommunity-lab-environment-mongo-express
    image: ${NOSQL_GUI_VERSION}
    profiles: ["util-mongo-express"]
    hostname: ${NOSQL_GUI_HOSTNAME}
    depends_on:
      ds-mongo:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
      denodo-lab-net:
        ipv4_address: ${NOSQL_GUI_IP}
    environment:
      - ME_CONFIG_MONGO_SERVER=mongodb
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${NOSQL_DB_ROOT_ADMIN}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${NOSQL_DB_ROOT_PWD}
      - ME_CONFIG_MONGODB_URL=mongodb://${NOSQL_DB_ROOT_ADMIN}:${NOSQL_DB_ROOT_PWD}@${NOSQL_DB_IP}:${NOSQL_DB_EXTERNAL_PORT}/
    ports:
      - '${NOSQL_GUI_EXTERNAL_PORT}:8081'

  # GraphQL playground
  util-graphql-playground:
    container_name: denodocommunity-lab-environment-graphql-playground
    image: ${GRAPHQL_GUI_VERSION}
    profiles: ["util-graphql","tutorial","ds"]
    hostname: ${GRAPHQL_GUI_HOSTNAME}
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
    restart: unless-stopped
    networks:
      denodo-lab-net:
        ipv4_address: ${GRAPHQL_GUI_IP}
    ports:
      - '${GRAPHQL_GUI_EXTERNAL_PORT}:4000'
    environment:
      csrfPrevention: false
      introspection: false

  # Cloudbeaver 
  util-cloudbeaver:
    container_name: denodocommunity-lab-environment-cloudbeaver
    image: ${DB_GUI_VERSION}
    profiles: ["util-dbclient"]
    hostname: ${DB_GUI_HOSTNAME}
    depends_on:
      denodo-vdp:
        condition: "service_started"
        required: false
      ds-postgresql:
        condition: "service_started"
        required: false
      ds-mariadb:
        condition: "service_started"
        required: false
    restart: always
    networks:
      denodo-lab-net:
        ipv4_address: ${DB_GUI_IP}
    volumes: 
      - dbclient-lab-env:/opt/cloudbeaver/workspace
    ports:
      - '${DB_GUI_EXTERNAL_PORT}:8978'
    
volumes:
  metadatadb-lab-env: 
    driver: local
  postgres-lab-env: 
    driver: local
  mariadb-lab-env: 
    driver: local
  mongodb-lab-env: 
    driver: local
  dbclient-lab-env:
    driver: local
  git-lab-env:
    driver: local
  dfs-lab-env:
    driver: local